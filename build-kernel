#!/bin/bash

set -e

if [[ -f ${HOME}/.ragnar.rc ]]; then
    source ${HOME}/.ragnar.rc
else
    TOP=${TOP:-"${HOME}/ragnar-artifacts"}
fi
mkdir -p ${TOP}

NUM_CPUS=${NUM_CPUS:-"$(getconf _NPROCESSORS_ONLN)"}

KDIR=${KDIR:-$(pwd)}

clean_build=0
build_deb_packages=0
build_kselftests=0
#ARCH=arm64
git_describe=$(git describe --long)
KERNEL_VERSION="linux-mainline"
VIRTIO_STUFF=0

usage() {
    echo -e "$0's help text"
    echo -e "   -a ARCH, specify the architecture to build, default: arm64"
    echo -e "   -c, cleanup output and staging dir before building, default: 0"
    echo -e "   -d CONFIG_URL, specify a url to a config file,"
    echo -e "      default: ${CONFIG_URL}"
    echo -e "   -k KERNEL_VERSION, kernel version that you want to build, default: linux-mainline"
    echo -e "      KERNEL_VERSION's to choose from:"
    echo -e "          linux-mainline,"
    echo -e "          linux-next,"
    echo -e "          linux-stable-4.14,"
    echo -e "          ..."
    echo -e "   -i defconfig, defconfig to build in the src tree"
    echo -e "   -m MACHINE, add machine name"
    echo -e "   -p, build deb packages"
    echo -e "   -s, build kselftests, default: 0"
    echo -e "   -v, enable virtio stuff, default: 0"
    echo -e "   -h, prints out this help"
}

MAKE() {
    make CROSS_COMPILE=${CROSS_COMPILE} ARCH=${ARCH} KDIR=${KDIR} O=${OUTPUT} "$@" ;
}

fixing_for_kvm() {
    configfile=$1
    # VIRTIO

    sed -i 's/CONFIG_VIRTIO=.*/CONFIG_VIRTIO=y/g' $configfile
    sed -i 's/CONFIG_VIRTIO_BALLOON=.*/CONFIG_VIRTIO_BALLOON=y/g' $configfile
    sed -i 's/CONFIG_BLK_MQ_VIRTIO=.*/CONFIG_BLK_MQ_VIRTIO=y/g' $configfile
    sed -i 's/CONFIG_SCSI_VIRTIO=.*/CONFIG_SCSI_VIRTIO=y/g' $configfile
    sed -i 's/CONFIG_VIRTIO_BLK=.*/CONFIG_VIRTIO_BLK=y/g' $configfile
    sed -i 's/CONFIG_VIRTIO_CONSOLE=.*/CONFIG_VIRTIO_CONSOLE=y/g' $configfile
    sed -i 's/CONFIG_VIRTIO_INPUT=.*/CONFIG_VIRTIO_INPUT=y/g' $configfile
    sed -i 's/CONFIG_VIRTIO_MENU=.*/CONFIG_VIRTIO_MENU=y/g' $configfile
    sed -i 's/CONFIG_VIRTIO_MMIO=.*/CONFIG_VIRTIO_MMIO=y/g' $configfile
    sed -i 's/CONFIG_VIRTIO_NET=.*/CONFIG_VIRTIO_NET=y/g' $configfile
    sed -i 's/CONFIG_VIRTIO_PCI=.*/CONFIG_VIRTIO_PCI=y/g' $configfile
    sed -i 's/CONFIG_VIRTIO_PCI_LEGACY=.*/CONFIG_VIRTIO_PCI_LEGACY=y/g' $configfile
    sed -i 's/# CONFIG_VIRTIO is.*/CONFIG_VIRTIO=y/g' $configfile
    sed -i 's/# CONFIG_VIRTIO_BALLOON is.*/CONFIG_VIRTIO_BALLOON=y/g' $configfile
    sed -i 's/# CONFIG_BLK_MQ_VIRTIO is.*/CONFIG_BLK_MQ_VIRTIO=y/g' $configfile
    sed -i 's/# CONFIG_SCSI_VIRTIO is.*/CONFIG_SCSI_VIRTIO=y/g' $configfile
    sed -i 's/# CONFIG_VIRTIO_BLK is.*/CONFIG_VIRTIO_BLK=y/g' $configfile
    sed -i 's/# CONFIG_VIRTIO_CONSOLE is.*/CONFIG_VIRTIO_CONSOLE=y/g' $configfile
    sed -i 's/# CONFIG_VIRTIO_INPUT is.*/CONFIG_VIRTIO_INPUT=y/g' $configfile
    sed -i 's/# CONFIG_VIRTIO_MENU is.*/CONFIG_VIRTIO_MENU=y/g' $configfile
    sed -i 's/# CONFIG_VIRTIO_MMIO is.*/CONFIG_VIRTIO_MMIO=y/g' $configfile
    sed -i 's/# CONFIG_VIRTIO_NET is.*/CONFIG_VIRTIO_NET=y/g' $configfile
    sed -i 's/# CONFIG_VIRTIO_PCI is.*/CONFIG_VIRTIO_PCI=y/g' $configfile
    sed -i 's/# CONFIG_VIRTIO_PCI_LEGACY is.*/CONFIG_VIRTIO_PCI_LEGACY=y/g' $configfile

    sed -i 's/CONFIG_BLK_SCSI_REQUEST=.*/CONFIG_BLK_SCSI_REQUEST=y/g' $configfile
    sed -i 's/CONFIG_VIRTIO_BLK_SCSI=.*/CONFIG_VIRTIO_BLK_SCSI=y/g' $configfile
    sed -i 's/CONFIG_SCSI=.*/CONFIG_SCSI=y/g' $configfile
    sed -i 's/CONFIG_SCSI_MOD=.*/CONFIG_SCSI_MOD=y/g' $configfile
    sed -i 's/CONFIG_SCSI_DMA=.*/CONFIG_SCSI_DMA=y/g' $configfile
    sed -i 's/# CONFIG_BLK_SCSI_REQUEST is.*/CONFIG_BLK_SCSI_REQUEST=y/g' $configfile
    sed -i 's/# CONFIG_VIRTIO_BLK_SCSI is.*/CONFIG_VIRTIO_BLK_SCSI=y/g' $configfile
    sed -i 's/# CONFIG_SCSI is.*/CONFIG_SCSI=y/g' $configfile
    sed -i 's/# CONFIG_SCSI_MOD is.*/CONFIG_SCSI_MOD=y/g' $configfile
    sed -i 's/# CONFIG_SCSI_DMA is.*/CONFIG_SCSI_DMA=y/g' $configfile

    # NEEDED

    sed -i 's/CONFIG_EXT4_FS=.*/CONFIG_EXT4_FS=y/g' $configfile
    sed -i 's/# CONFIG_EXT4_FS is .*/CONFIG_EXT4_FS=y/g' $configfile

}

while getopts "a:cd:hk:i:m:psv" arg; do
    case $arg in
        a)
            ARCH="$OPTARG"
            ;;
        c)
            clean_build=1
            ;;
        d)
            CONFIG_URL="$OPTARG"
            ;;
        k)
            KERNEL_VERSION="$OPTARG"
            ;;
        i)
            DEFCONFIG_FILENAME="$OPTARG"
            ;;
        m)
            MACHINE="$OPTARG"
            ;;
        p)
            build_deb_packages=1
            ;;
        s)
            build_kselftests=1
            ;;
        v)
            VIRTIO_STUFF=1
            ;;
        h|*)
            usage
            exit 0
            ;;
    esac
done

which_machine() {
    case ${MACHINE} in
        am57xx-evm)
            ARCH=arm
            CONFIG_URL=${CONFIG_URL:-"http://snapshots.linaro.org/openembedded/lkft/rocko/${MACHINE}/rpb/${KERNEL_VERSION}/latest/config"}
            image_name=zImage
            dtb_name="am57xx-beagle-x15"
            ;;
        hikey)
            ARCH=arm64
            CONFIG_URL=${CONFIG_URL:-"http://snapshots.linaro.org/openembedded/lkft/rocko/${MACHINE}/rpb/${KERNEL_VERSION}/latest/config"}
            image_name=Image
            dtb_name="hi6220-hikey"
            ;;
        intel-core2-32)
            ARCH=x86
            CONFIG_URL=${CONFIG_URL:-"http://snapshots.linaro.org/openembedded/lkft/rocko/${MACHINE}/rpb/${KERNEL_VERSION}/latest/config"}
            image_name=bzImage
            ;;
        *)
            usage
            exit 1
            ;;
    esac

    OUTPUT=${OUTPUT:-"${TOP}/build_output/${ARCH}/${git_describe}"}
    STAGING=${STAGING:-"${TOP}/staging/${ARCH}/${git_describe}"}
}

if [ $(grep -c "^WHAT IS LINUX" README) -ne 1 ] &&
    [  $(grep -c "^Linux kernel" README) -ne 1 ]; then
    echo -e "ERROR: Need to run this script $(basename $0),"
    echo -e "  from a kernel repository"
    echo ""
    usage
    exit 1
fi

which_arch() {
    case $ARCH in
        arm)
            [[ $(uname -m) == 'armv7l' ]] || CROSS_COMPILE=${CROSS_COMPILE:-"arm-linux-gnueabihf-"}
            ;;
        arm64)
            [[ $(uname -m) == 'aarch64' ]] || CROSS_COMPILE=${CROSS_COMPILE:-"aarch64-linux-gnu-"}
            ;;
        x86)
            [[ $(uname -m) == 'x86_64' ]] || CROSS_COMPILE=${CROSS_COMPILE:-"x86_64-linux-gnu-"}
            ;;
        *)
    esac
}

clean_build() {
    if [[ $clean_build -eq 1 ]]; then
        echo "Cleaning up output and staging dir before building!"
        rm -rf ${OUTPUT}
        rm -rf ${STAGING}
    fi
}

create_dir() {
    mkdir -p ${OUTPUT}
    mkdir -p ${STAGING}
}

choose_config() {
    if [[ -z ${DEFCONFIG_FILENAME} ]]; then
        curl -sSL -o .config ${CONFIG_URL}
        #echo CONFIG_MODULES=y >> .config
    else
        MAKE -j ${NUM_CPUS} ${DEFCONFIG_FILENAME} 2>&1 | tee ${STAGING}/make_config.log
    fi
}

add_virtio() {
    if [[ ${VIRTIO_STUFF} -eq 1 ]]; then
        fixing_for_kvm .config
    fi
}

make_config() {
    MAKE -j ${NUM_CPUS} olddefconfig 2>&1 | tee ${STAGING}/make_config.log
    rm .config
    cp -f ${OUTPUT}/.config ${STAGING}/kernel-${git_describe}.config
}

make_build() {
    MAKE -j ${NUM_CPUS} 2>&1 | tee ${STAGING}/make_build.log
}

make_dtb() {
    if [[ -d arch/${ARCH}/boot/dts ]]; then
        MAKE -j ${NUM_CPUS} INSTALL_DTBS_PATH=${STAGING}/dtbs dtbs_install 2>&1 | tee ${STAGING}/make_dts.log
        for file in $(find ${STAGING}/dtbs -type f -name '*.dtb') ; do
            if [[ ! $(basename ${file}) =~ ${git_describe}.dtb ]]; then
                new_file=$(printf '%s\n' "${file%.dtb}-${git_describe}.dtb");
                mv ${file} ${new_file}
            fi
        done
    fi
    if [[ ${ARCH} != "x86" ]]; then
        cp -f $(find ${STAGING} -type f -name "*${dtb_name}-${git_describe}.dtb") ${STAGING}/
    fi
}

make_modules() {
    if [[ $(grep CONFIG_MODULES=y ${OUTPUT}/.config) ]]; then
        MAKE -j ${NUM_CPUS} INSTALL_MOD_PATH=${STAGING} modules_install 2>&1 | tee ${STAGING}/make_modules.log
        pushd ${STAGING}
        tar -zcf modules-$(basename ${STAGING}).tar.gz lib/
        popd
    fi
}

make_image() {
    MAKE -j ${NUM_CPUS} ${image_name} 2>&1 | tee ${STAGING}/make_image.log
    cp -f ${OUTPUT}/arch/${ARCH}/boot/${image_name} ${STAGING}/${image_name}-${git_describe}
}

make_deb_packages() {
    if [[ $build_deb_packages -eq 1 ]]; then
        MAKE -j ${NUM_CPUS} bindeb-pkg 2>&1 | tee ${STAGING}/make_deb-pkg.log

        mv -f ${OUTPUT}/../*$(basename ${OUTPUT} |awk -F'-' '{print $1-$2}')*.* ${STAGING}
    fi
}

make_kselftests() {
    if [[ $build_kselftests -eq 1 ]]; then
        MAKE -C tools/testing/selftests 2>&1 | tee ${STAGING}/make_kselftest.log
        MAKE -C tools/testing/selftests install 2>&1 | tee ${STAGING}/make_kselftest_install.log
    fi
}

which_machine
which_arch
clean_build
create_dir
choose_config
add_virtio
make_config
make_build
make_dtb
make_modules
make_image
make_deb_packages
make_kselftests

echo ""
echo ""
echo "If build warnings or errors, they will be printed below:"
echo ""
echo ""
grep -i -A 4 -B 1 "\(warning\|error\):" ${STAGING}/make_build.log

echo ""
echo ""
if [[ $(grep CONFIG_MODULES=y ${OUTPUT}/.config) ]]; then
    grep -i -A 4 -B 1 "\(warning\|error\):" ${STAGING}/make_modules.log
fi
echo ""
echo ""
if [[ $build_kselftests -eq 1 ]]; then
    grep -i -A 4 -B 1 "\(warning\|error\):" ${STAGING}/make_kselftest.log
fi
## vim: set sw=4 sts=4 et foldmethod=syntax : ##
